class Deduplicate_State
!!!583174.cpp!!!	_completion(inout stm : DedupOrchestrator) : bool
  {
    stm._deduporchestrator_state._deduplicate_state._doexit(stm);
    stm._set_currentState(stm._deduporchestrator_state._wait_state);
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : current state is now .DedupOrchestrator.Wait" << std::endl;
#endif
    return (bool) 1;
  }
!!!583302.cpp!!!	create(inout stm : DedupOrchestrator) : void
	_doentry(stm);
	_completion(stm);
!!!583430.cpp!!!	_doentry(inout stm : DedupOrchestrator) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute entry behavior of .DedupOrchestrator.Deduplicate" << std::endl;
#endif
for (auto &msg : stm.episode_) {
  ExchangeMessage *emsg = dynamic_cast<ExchangeMessage *>(msg.get());
  Dedup *dedup;
  try {
    dedup = stm.dedups_.at(emsg->getPriceSide()).get();
  } catch (const std::out_of_range &) {
    auto new_dedup(std::make_unique<Dedup>(&stm));
    new_dedup->create();
    dedup = (stm.dedups_[emsg->getPriceSide()] = std::move(new_dedup)).get();
  }
  auto output = dedup->handle(std::move(msg));
  std::move(output.begin(), output.end(), std::back_inserter(stm.output_));
}
stm.episode_.clear();
!!!583558.cpp!!!	_doexit(inout stm : DedupOrchestrator) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute exit behavior of .DedupOrchestrator.Deduplicate" << std::endl;
#endif
// Dedup *dedup = stm.contaminated_iter_->second;
// dedup->timeElapsed(exchange_timestamp_);
// if (!dedup->is_contaminated_)
//  stm.contaminated_.erase(stm.contaminated_iter_);
!!!583686.cpp!!!	_upper(inout stm : DedupOrchestrator) : DedupOrchestrator::AnyState
  return &stm._deduporchestrator_state;
