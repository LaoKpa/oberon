class DeduplicateBitstamp
!!!820230.cpp!!!	elapsed() : bool
for (auto i_other = std::begin(other_messages_);
     i_other != std::end(other_messages_); ++i_other) {
  auto change_size = (*i_other)->getChangeSize();
  if (std::isnan(change_size) || change_size > 0) {
    for (auto i_fills = std::begin(fills_); i_fills != std::end(fills_);
         ++i_fills) {
      if ((*i_other)->getOrderId() == (*i_fills)->getOrderId() &&
          (std::isnan(change_size) ||
           std::abs(change_size - (*i_fills)->getChangeSize()) <
              reconstructor_.base_increment_)) {
        (*i_fills)->setRemainingSize((*i_other)->getRemainingSize());
        i_other = other_messages_.erase(i_other);
        i_other = other_messages_.insert(i_other, std::move(*i_fills));
        fills_.erase(i_fills);
        break;
      }
    }
  }
}
std::move(std::begin(other_messages_), std::end(other_messages_),
          std::back_inserter(output_));
other_messages_.clear();
output_.push_back(std::move(received_));
if (fills_.empty())
  return true;
else {
  /*for (auto &msg : fills_)
    std::cout << "F :" << msg->toString() << std::endl;
  for (auto &msg : output_)
    std::cout << "E: " << msg->toString() << std::endl;*/
  fills_.clear();
  return false;
}
!!!820358.cpp!!!	filled() : bool
fills_.push_back(std::unique_ptr<Filled>(dynamic_cast<Filled*>(received_.release())));
return true;
!!!820486.cpp!!!	exchangeMessage() : bool
other_messages_.push_back(std::unique_ptr<ExchangeMessage>(dynamic_cast<ExchangeMessage*>(received_.release())));
return true;
