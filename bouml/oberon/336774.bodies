class Unstable_State
!!!349958.cpp!!!	timeout(inout stm : Price_Level) : void
  {
#ifdef VERBOSE_STATE_MACHINE
    puts("DEBUG : execute activity of transition <transition>");
#endif
pruneRedundant();    stm._set_currentState(stm._price_level_state._occupied_state);
#ifdef VERBOSE_STATE_MACHINE
    puts("DEBUG : current state is now .Price Level.Occupied");
#endif
    if (!stm.isAllOrdersFinished()) {
      stm._set_currentState(stm._price_level_state._occupied_state._stable_state);
#ifdef VERBOSE_STATE_MACHINE
      puts("DEBUG : current state is now .Price Level.Occupied.Stable");
#endif
      stm._price_level_state._occupied_state._stable_state.create(stm);
    }
    else if (stm.isAllOrdersFinished()) {
      stm._set_currentState(stm._price_level_state);
#ifdef VERBOSE_STATE_MACHINE
      puts("DEBUG : current state is now .Price Level");
#endif
      stm._final();
    }
  }
!!!350086.cpp!!!	create(inout stm : Price_Level) : void
	_doentry(stm);
!!!350214.cpp!!!	_doentry(inout stm : Price_Level) : void
#ifdef VERBOSE_STATE_MACHINE
	puts("DEBUG : execute entry behavior of .Price Level.Occupied.Unstable");
#endif
enter();
!!!350342.cpp!!!	_upper(inout stm : Price_Level) : Price_Level::AnyState
  return &stm._price_level_state._occupied_state;
