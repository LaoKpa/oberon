class Dispatch_State
!!!538758.cpp!!!	_completion(inout stm : DedupOrchestrator) : bool
  {
    stm._deduporchestrator_state._dispatch_state._doexit(stm);
    stm._set_currentState(stm._deduporchestrator_state._cleanse_state);
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : current state is now .DedupOrchestrator.Cleanse" << std::endl;
#endif
    stm._deduporchestrator_state._cleanse_state.create(stm);
    return (bool) 1;
  }
!!!538886.cpp!!!	create(inout stm : DedupOrchestrator) : void
	_doentry(stm);
	_do(stm);
	_completion(stm);
!!!539014.cpp!!!	_doentry(inout stm : DedupOrchestrator) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute entry behavior of .DedupOrchestrator.Dispatch" << std::endl;
#endif
// save elapsed message
!!!539142.cpp!!!	_doexit(inout stm : DedupOrchestrator) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute exit behavior of .DedupOrchestrator.Dispatch" << std::endl;
#endif
// set current time
!!!539270.cpp!!!	_do(inout stm : DedupOrchestrator) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute do behavior of .DedupOrchestrator.Dispatch" << std::endl;
#endif
Dedup *dedup;
for (auto msg : stm.episode_) {
  try {
    dedup = stm.all_dedups_.at(msg->getPriceSide());
  } catch (const std::out_of_range &) {
    dedup = new Dedup(&(stm.processed_), &stm);
    dedup->create();
    stm.all_dedups_[msg->getPriceSide()] = dedup;
  }
  msg->accept(dedup);
}
!!!539398.cpp!!!	_upper(inout stm : DedupOrchestrator) : DedupOrchestrator::AnyState
  return &stm._deduporchestrator_state;
