class Contaminated_State
!!!534918.cpp!!!	elapsed(inout stm : Dedup) : void
  if (stm.received_->getTimestamp() <= stm.contamination_period_[1] + stm.wait_duration_
) {
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : execute activity of transition elapsed, ignored" << std::endl;
#endif
//do nothing
  }
  else {
    stm._dedup_state._contaminated_state._doexit(stm);
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : execute activity of transition elapsed, pass" << std::endl;
#endif
stm.passDeferred();    stm._set_currentState(stm._dedup_state._pristine_state);
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : current state is now .Dedup.Pristine" << std::endl;
#endif
    stm._dedup_state._pristine_state.create(stm);
  }
!!!535046.cpp!!!	_doentry(inout stm : Dedup) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute entry behavior of .Dedup.Contaminated" << std::endl;
#endif
stm.contamination_period_[0] = stm.received_->getTimestamp();
stm.contamination_period_[1] = stm.contamination_period_[0];
stm.orchestrator_->setOutputBoundary(stm.contamination_period_[0]);
!!!535174.cpp!!!	_doexit(inout stm : Dedup) : void
#ifdef VERBOSE_STATE_MACHINE
  std::cout << "DEBUG : execute exit behavior of .Dedup.Contaminated" << std::endl;
#endif
stm.orchestrator_->releaseOutputBoundary(stm.contamination_period_[0]);
stm.contamination_period_[0] = Timestamp();
stm.contamination_period_[1] = Timestamp();

!!!535302.cpp!!!	_upper(inout stm : Dedup) : Dedup::AnyState
  return &stm._dedup_state;
!!!547846.cpp!!!	message(inout stm : Dedup) : void
  {
#ifdef VERBOSE_STATE_MACHINE
    std::cout << "DEBUG : execute activity of transition message" << std::endl;
#endif
ExchangeMessage *ptr = dynamic_cast<ExchangeMessage *>(stm.received_.release());
assert(ptr);
stm.deferred_.push_back(std::unique_ptr<ExchangeMessage>(ptr));
;
  }
